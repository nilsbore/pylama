>from pylama.common import documentclass
>documentclass("proc")
>from pylama.common import *
>from pylama.layout import centering, raggedleft, raggedright, center
>from pylama.convenience import latex
>from pylama.table import table, setcell
>from pylama.figure import figure, includegraphics, figuretable, subfigure
>from pylama.code import code, verbatim
>from pylama.hyperref import url

>title = "pylama: Make typesetting great again"
>author = "Nils Bore"

>begin_document()
>make_title(title, author)

>intro = section("Introduction")

># This is a short, one-line comment

>comment()
    This is a long
    comment with
    several lines.

Pylama can be best described as a wrapper around the
>verbatim("LaTeX")
typesetting system. It attempts to provide a cleaner syntax for your
standard document while still allowing you to add latex inline when needed.
The pylama language is built on top of the Python interpreter and,
as opposed to
>verbatim("LaTeX")
the language is inspired by Python's indentation based grouping of code and text.
To execute code within your pylama document, you start the line with a
>verbatim(">")
, similar to command prompts like bash. Use one or multiple lines depending
on the complexity of the task, all python code and libraries can be imported
and used.

To start out your document, you typically type something like
>code()
    >from pylama.common import *
    >documentclass("proc")
. With this done, you can start building your document. Variables in
the document are stored in a global context, so if you want to provide the
environment with the basics and start out your document, you can type:
>code()
    >title = "pylama: Make typesetting great again"
    >author = "Nils Bore"

    >begin_document()
    >make_title(title, author)
You declare subsections with respect to the parent section, avoiding
having to type "sub" too many times and helping you keep track of the hierarchy.
>code()
    >maths = intro.subsection("Maths")
Too get more familiar with the language, let's look at how we can use pylama for maths.

>maths = intro.subsection("Maths")

Equations, like
>equation1 = equation()
    A*A = A^2
can be declared with the following syntax:
>code()
    >equation1 = equation()
        A*A = A^2
Note the
>verbatim("equation1")
assignment preceding the equation declaration. This gives us a handle
that we can use to reference the equation later in the document using
the syntax
>verbatim(">ref(equation1)")
with the result
>ref(equation1)
. This has the great advantage that we can actually check if the variable
is present in the current context and throw and error if that is not the case.
In latex this would quietly fail with a question mark in the final document.

The other important thing to note is that there is an indent before
the actual equation text. This declares that the text is a child of
the
>verbatim("equation()")
declaration. The equation environment takes care of processing the
formula into text that can be inserted into the final
>verbatim("LaTeX")
document. The indentation based syntax is a cornerstone of the pylama
language and allows these so called contexts to be nested arbitrarily deep.
The next section delves deeper into contexts.

>items = intro.subsection("Items and Scopes")

>comment()
    >itemize()
        >for i in range(0,5):
        >    item()
            Item:
            >latex(str(i))

>code(caption="Items need to be organized by indentation to be properly parsed.")
    >itemize()
        >item()
            Item 1!
        >item()
            Item 2!
        >item()
            Item 3!

>latex("Some latex")

>tables = intro.subsection("Tables")

This is a very simple test.
This should also work with multi-line.

># A scope provides two methods, .string() and .add()
># String simply removes the generated latex text as a string
># while add inserts the content in the main latex document
>table_caption_1 = scope()
    The table showcases how to assign table cells by indices and
    how you can include contexts within each others. The image
    showcased in all figures is created by BanzaiTokyo,
    >url("http://www.iconarchive.com/show/ugly-birds-icons-by-banzaitokyo/angor-icon.html")
    . See table example Listing
    >ref(table_example_1)
    for code.

>table_example_1 = code(caption = "The tables are indexed by row col in a numpy matrix")
    >t1 = table(rows=2, cols=3, caption="A table.")
        >print cell.shape
        >print rows
        >print cols
        >centering()
        >setcell(0, 0)
            a
        >setcell(0, 2)
            c
        >setcell(0, 1)
            b
        >setcell(1, 0)
            >includegraphics(image="birds.png", scale=0.3)
        >setcell(1, 1)
            e
        >setcell(1, 2)
            f
        >cell[1, 1].children[0].text = "Tjena"
        >print cell[0, 0].children[0].text
        >print cell[0, 1].parent.indent

>ss = table_caption_1.string()

>t1 = table(rows=2, cols=3, width="\textwidth", caption=ss)
    >print cell.shape
    >print rows
    >print cols
    >centering()
    >setcell(0, 0)
        a
    >setcell(0, 2)
        c
    >setcell(0, 1)
        b
    >setcell(1, 0)
        >includegraphics(image="birds.png", scale=0.3)
    >setcell(1, 1)
        e
    >setcell(1, 2)
        f
    >cell[1, 1].children[0].text = "Tjena"
    >print cell[0, 0].children[0].text
    >print cell[0, 1].parent.indent

>latex("Tableref: %s" % t1)

Just referencing table 1:
>ref(t1)

>table_example_2 = code(caption="Python and pylama interoperation.")
    >table_contents = [["(Observations)", "Finch", "Seagull", "Crow", "Pigeon", "Hawk"],\
    >                  ["Sea", 2, 10, 1, 3, 4],\
    >                  ["Park", 4, 2, 6, 8, 0],\
    >                  ["Cliff", 2, 4, 1, 0, 2]]
    >table(rows=4, cols=6, width="\textwidth", caption="Bird locations.")
        >print cell.shape
        >centering()
        >for r in range(0, rows):
        >    for c in range(0, cols):
        >        setcell(r=r, c=c)
            Obs:
            >latex(str(table_contents[r][c]))

>table_caption_2 = scope()
    This example showcases how you can define a table in python and directly import it into pylama.
    For the code generating this table, look at Listing
    >ref(table_example_2)
    .
>ss = table_caption_2.string()

>table_contents = [["(Observations)", "Finch", "Seagull", "Crow", "Pigeon", "Hawk"],\
>                  ["Sea", 2, 10, 1, 3, 4],\
>                  ["Park", 4, 2, 6, 8, 0],\
>                  ["Cliff", 2, 4, 1, 0, 2]]
>table(rows=4, cols=6, width="\textwidth", caption=ss)
    >print cell.shape
    >centering()

    >for r in range(0, rows):
    >    for c in range(0, cols):
    >        setcell(r=r, c=c)
        Obs:
        >latex(str(table_contents[r][c]))

>figures = section("Figures")

>code(caption = "Declaring a figure is a oneliner.")
    >f1 = figure(caption="Some lovely red birds", image="birds.png", placement="htpb")
        >center()
>f1 = figure(caption="Some lovely red birds", image="birds.png", placement="htpb", scale=0.6)
    >center()

>latex("Figureref: %s" % f1)
Just referencing figure 1:
>ref(f1)

>#print I

>subfigures = figures.subsection("Subfigures")

>code(caption = "Figuretables are similar to tables with subfigures in the cells")
    >s1 = figuretable(rows=1, cols=4, caption="Birds mr table")
        >print cell.shape
        >print rows
        >print cols
        >center()
        >setcell(0, 0)
            >subfigure(caption="Birds 1", image="birds.png", scale=0.6)
                >center()
        >setcell(0, 1)
            >subfigure(caption="Birds 2", image="birds.png", scale=0.6)
                >center()
        >setcell(0, 2)
            >subfigure(caption="Birds 3", image="birds.png", scale=0.6)
                >center()
        >setcell(0, 3)
            >sf1 = subfigure(caption="Birds 4", image="birds.png", scale=0.6)
                >center()

>caption="Hej!"

>s1 = figuretable(rows=1, cols=4, caption="Birds mr table")
    >print cell.shape
    >print rows
    >print cols
    >center()
    >setcell(0, 0)
        >subfigure(caption="Birds 1", image="birds.png", scale=0.4)
            >center()
    >setcell(0, 1)
        >subfigure(caption="Birds 2", image="birds.png", scale=0.4)
            >center()
    >setcell(0, 2)
        >subfigure(caption="Birds 3", image="birds.png", scale=0.4)
            >center()
    >setcell(0, 3)
        >sf1 = subfigure(caption="Birds 4", image="birds.png", scale=0.4)
            >center()

>print caption

Referencing Equation
>latex("Eqref: %s" % equation1)
>ref(equation1)
And finally, the figure table, Figure
>ref(s1)
and the cell:
>ref(sf1)

>inputs = section("Combining files")

>code(caption = ".pymd files can be included in each other using the input command.")
    >input("test/input.pymd")

>code(caption = "This is the content of the test/input.pymd file")
    This was written in another file!

>input("test/input.pymd")

>references = section("References")

The following code cites a reference and adds a bibliography file to
the document:

>code()
    >cite("knuth1979tex")
    >add_bibliography("main", "ieeetr")

This results in the reference
>cite("knuth1979tex")
and a bibliography at the end of the document.
>add_bibliography("main", "ieeetr")

>end_document()
