>from pylama.common import documentclass
>documentclass("proc")
>from pylama.common import *
>from pylama.layout import centering, raggedleft, raggedright, center
>from pylama.convenience import latex, text
>from pylama.table import table, setcell
>from pylama.figure import figure, includegraphics, figuretable, subfigure
>from pylama.code import code, verbatim
>from pylama.hyperref import url

>title = "pylama: Make typesetting great again"
>author = "Nils Bore"

>begin_document()
>make_title(title, author)

>intro = section("Introduction")

># This is a short, one-line comment

>comment()
    This is a long
    comment with
    several lines.

Pylama can be best described as a wrapper around the >verbatim("LaTeX")
typesetting system. It attempts to provide a cleaner syntax for your
standard document while still allowing you to add latex inline when needed.
The pylama language is built on top of the Python interpreter and,
as opposed to >verbatim("LaTeX"), the language is
inspired by Python's indentation based grouping of code and text.
To execute code within your pylama document, you start the line with a >verbatim(">"),
similar to command prompts like bash. Use one or multiple lines depending
on the complexity of the task, all python code and libraries can be imported
and used.

To start out your document, you typically type something like
>code()
    >from pylama.common import *
    >documentclass("proc")
. With this done, you can start building your document. Variables in
the document are stored in a global context, so if you want to provide the
environment with the basics and start out your document, you can type:
>code()
    >title = "pylama: Make typesetting great again"
    >author = "Nils Bore"

    >begin_document()
    >make_title(title, author)
You declare subsections with respect to the parent section, avoiding
having to type "sub" too many times and helping you keep track of the hierarchy.
>code()
    >maths = intro.subsection("Maths")
Too get more familiar with the language, let's look at how we can use pylama for maths.

>maths = intro.subsection("Maths")

Equations, like
>equation1 = equation()
    A*A = A^2
can be declared with the following syntax:
>code()
    >equation1 = equation()
        A*A = A^2
Note the >verbatim("equation1")
assignment preceding the equation declaration. This gives us a handle
that we can use to reference the equation later in the document using
the syntax >verbatim(">ref(equation1)") with the result: >ref(equation1).
This has the great advantage that we can actually check if the variable
is present in the current context and throw and error if that is not the case.
In latex this would quietly fail with a question mark in the final document.

The other important thing to note is that there is an indent before
the actual equation text. This declares that the text is a child of
the >verbatim("equation()") declaration.
The equation environment takes care of processing the
formula into text that can be inserted into the final >verbatim("LaTeX")
document. The indentation based syntax is a cornerstone of the pylama
language and allows these so called contexts to be nested arbitrarily deep.
The next section delves deeper into contexts.

>items = intro.subsection("Lists and Blocks")

Item lists are a good example for illustrating nested text blocks.
At the top level sits an >verbatim(">itemize()") or >verbatim(">enumerate()")
declaration. In the indented level, as children of the >verbatim(">itemize()"),
sit several >verbatim(">item()") which in turn have their own children,
typically text, that declare the content of the respective items.
A complete list can be declared as
>code()
    >itemize()
        >item()
            Item 1!
        >item()
            Item 2!
        >item()
            Item 3!
which results in the following list:
>itemize()
    >item()
        Item 1!
    >item()
        Item 2!
    >item()
        Item 3!
Note that the children block themselves can contain one or multiple
text or code blocks and that they can be layered in several steps.
This is illustrated in the next section, where we mix text and
figures inside a table environment.

>tables = intro.subsection("Tables and Variables")

Usually, variables in pylama are declared in a global scope. For example,
if you declare a variable >verbatim(">a=3")
anywhere in your document, even inside a block, it will be accessible anywhere
after that declaration. This allows you to reference a nested block even
when you are on a higher level in the block hierarchy, as we will see in
the subfigure example. However, there is one exception to this in the form
of local variables. Local variables are declared by providing keyword
arguments to the block functions. In the example below, >verbatim("rows, cols")
and >verbatim("caption") are local variables and can only be
referenced within the child block.
Notice how we can use them in the table definition to display the size of the table.
>table_example_1 = code(caption = "The tables are indexed by row col in a numpy matrix")
    >table(rows=2, cols=3, caption="A table.")
        >centering()
        >setcell(0, 0)
            Figure:
        >setcell(1, 0)
            >includegraphics(image="birds.png", scale=0.3)
        >setcell(0, 1)
            Rows:
        >setcell(1, 1)
            >text(rows)
        >setcell(0, 2)
            Columns:
        >setcell(1, 2)
            >text(cols)
># A lazy provides two methods, .string() and .add()
># String simply removes the generated latex text as a string
># while add inserts the content in the main latex document
>table_caption_1 = lazy()
    The table showcases how to assign table cells by indices and
    how you can include contexts within each others. The image
    showcased in all figures is created by
    BanzaiTokyo, >url("http://www.iconarchive.com/show/ugly-birds-icons-by-banzaitokyo/angor-icon.html").
    See table example Listing >ref(table_example_1) for code.

>table_1 = table(rows=2, cols=3, width="\textwidth", caption=table_caption_1.string())
    >centering()
    >setcell(0, 0)
        Figure:
    >setcell(1, 0)
        >includegraphics(image="birds.png", scale=0.3)
    >setcell(0, 1)
        Rows:
    >setcell(1, 1)
        >text(rows)
    >setcell(0, 2)
        Columns:
    >setcell(1, 2)
        >text(cols)
The result can be viewed in Table >ref(table_1).
Note that indexing the blocks like this might be a slightly clumsy way of
defining the contents of your table. Instead, we might use python lists to
define the table below. Looping through and setting the blocks appropriately
allows us to express this more compactly.
>table_example_2 = code(caption="Python and pylama interoperation.")
    >table_contents = [["(Observations)", "Finch", "Seagull", "Crow", "Pigeon", "Hawk"],\
    >                  ["Sea", 2, 10, 1, 3, 4],\
    >                  ["Park", 4, 2, 6, 8, 0],\
    >                  ["Cliff", 2, 4, 1, 0, 2]]
    >table(rows=4, cols=6, caption="Bird places.")
        >centering()
        >for r in range(0, rows):
        >    for c in range(0, cols):
        >        setcell(r=r, c=c)
            Obs:
            >text(table_contents[r][c])
>table_caption_2 = lazy()
    This example showcases how you can define a table in python and directly import it into pylama.
    For the code generating this table, look at Listing >ref(table_example_2).

>table_contents = [["(Observations)", "Finch", "Seagull", "Crow", "Pigeon", "Hawk"],\
>                  ["Sea", 2, 10, 1, 3, 4],\
>                  ["Park", 4, 2, 6, 8, 0],\
>                  ["Cliff", 2, 4, 1, 0, 2]]
>table_2 = table(rows=4, cols=6, caption=table_caption_2.string())
    >centering()
    >for r in range(0, rows):
    >    for c in range(0, cols):
    >        setcell(r=r, c=c)
        Obs:
        >text(table_contents[r][c])
The resulting table is shown in Table >ref(table_2).

>figures = section("Figures and References")

Figures are defined in a way to let the most common types be very easy
to define. Simply adding an image with a caption and a reference variable
is as easy as:
>code(caption = "Declaring a figure is a oneliner.")
    >f1 = figure(caption="A lovely blue bird.", image="birds.png", placement="htpb")
        >center()
>f1 = figure(caption="A lovely blue bird.", image="birds.png", placement="htpb", scale=0.6)
    >center()
All common code blocks that can be referenced return a reference variable, in
this case >verbatim("f1"). This can be easily referenced through >verbatim(">ref(f1)"),
resulting in: >ref(f1). If you wish, you can also reference using a string,
but in that case you need to provide the >verbatim("label") argument.

>#print I

>subfigures = figures.subsection("Subfigures")

A common case in scientific writing is also the use of tables containing
figures, often with captions for each individual figure. This is enabled
with the >verbatim("figuretable()") function block,
which works in a way very similar to ordinary tables,
with the difference that all cells should contain only >verbatim("subfigure()")
function blocks. This is showcased in the example below:
>figure_example_1 = code(caption = "Figuretables are similar to tables with subfigures in the cells with the same index function.")
    >figuretable(rows=1, cols=4, caption="A table with four lovely blue birds.")
        >center()
        >setcell(0, 0)
            >subfigure(caption="Jason.", image="birds.png", scale=0.4)
                >center()
        >setcell(0, 1)
            >subfigure(caption="Kenneth.", image="birds.png", scale=0.4)
                >center()
        >setcell(0, 2)
            >subfigure(caption="Olav.", image="birds.png", scale=0.4)
                >center()
        >setcell(0, 3)
            >sf1 = subfigure(caption="Makunde.", image="birds.png", scale=0.4)
                >center()
>figure_caption_1 = lazy()
    The figure table example generated from code example Listings >ref(figure_example_1).

>s1 = figuretable(rows=1, cols=4, caption=figure_caption_1.string())
    >center()
    >setcell(0, 0)
        >subfigure(caption="Jason.", image="birds.png", scale=0.4)
            >center()
    >setcell(0, 1)
        >subfigure(caption="Kenneth.", image="birds.png", scale=0.4)
            >center()
    >setcell(0, 2)
        >subfigure(caption="Olav.", image="birds.png", scale=0.4)
            >center()
    >setcell(0, 3)
        >sf1 = subfigure(caption="Makunde.", image="birds.png", scale=0.4)
            >center()

Note the >verbatim("sf1") assignment.
This can be reference outside the figure table with the result: >ref(sf1).

>details = section("Details")
>lazys = details.subsection("Lazy blocks")

Pylama is designed to make the common things easy while making the hard
things possible. In that spirit, e.g. captions of figures and tables are
provided as strings to the block function of the figure or table.
However, sometimes you would like the captions themselves to be defined
using the pylama functions and blocks. This is where the >verbatim("lazy()")
block function comes in. It enables you to define a block like:
>code()
    >lazy_1 = lazy()
        This is text that will only get added later.
This block will not get added in the text in that place of its declaration.
Instead it will get added when you call >verbatim("lazy\_1.add()").
However, you could instead call >verbatim("ss = lazy\_1.string()"),
resulting in a string >verbatim("ss")
with the block evaluated as text, which you can then provide as the
caption argument to a figure, table, or other block function.
Several of the more complex captions in the examples of this document
were generated in this way.

>contexts = details.subsection("Extending through Contexts")

Inside each block you have access to a variety of introspection details.
Below are some examples of what you can access for example inside an equation block.
>code()
    >equation()
        A + A = 2A
        ># prints "4", the current indent level:
        >print Context.context.indent
        ># prints "A + A = 2A", the first child:
        >print Context.parent.children[0].text
        ># prints "0" as this block has no children:
        >print len(Context.children)
The >verbatim("Context") class is the main interface for all of pylama.
Through it, you can access details of the environment like in the example above,
but it is also the mechanism through which the document is constructed.
Importantly, no block gets added to the final document unless its parent
block explicitly adds it. The >verbatim("Context.context") object has a
method, >verbatim("Context.context.add()") which adds all of its child blocks
into the document, which can then in turn add their children if they wish to.
We will make our own version of the equation block function above to
demonstrate this. Since all of our code should compile down to >verbatim("LaTex"),
we can simply write:
>code(show_arrows=False)
    >def equation(label):
    >    latex("\\begin{equation}")
    >    Context.context.add()
    >    latex("\label{%s}" % label)
    >    latex("\end{equation}")
    >    return label
Now this can be put in a python file and exported as any other library into
any pylama document. The function simply puts the proper declarations
around the equation block and then adds the child blocks through
the >verbatim("Context.context.add()") function.

>things = section("Useful Things")
>inputs = things.subsection("Combining files")

Splitting your text up between different >verbatim(".pymd")
or >verbatim(".tex") files is generally considered good practice.
A >verbatim(".pymd") file can be included via the >verbatim("input()")
function while >verbatim(".tex") files are imported via the >verbatim("latexinput()")
function. >verbatim(".pymd") files get expanded within the larger environment,
giving it access to declared variables there in order for it to e.g.
reference figures or other sections. So, for example, if you have
a file >verbatim("test/input.pymd") you can import it with:
>code()
    >input("test/input.pymd")
If the contents of the file are
>code()
    This was written in another file!
this will result in the following line:
>input("test/input.pymd")

>references = things.subsection("Citing")

The following code cites a reference and adds a bibliography file to
the document:
>code()
    >cite("knuth1979tex")
    >add_bibliography("main", "ieeetr")
This results in the reference >cite("knuth1979tex")
and a bibliography at the end of the document.
>add_bibliography("main", "ieeetr")

>end_document()
